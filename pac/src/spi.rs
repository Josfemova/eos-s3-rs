#[doc = r"Register block"]
#[repr(C)]
pub struct RegisterBlock {
    _reserved_0_dr0: [u8; 0x04],
    #[doc = "0x04 - Control Register 1: CTRLR1 register controls the end of serial transfers when in receive-only mode. It is impossible to write to this register when the SPI Master is enabled. The SPI Master is enabled and disabled by writing to the SSIENR register (0x008)."]
    pub ctrlr1: crate::Reg<ctrlr1::CTRLR1_SPEC>,
    _reserved2: [u8; 0x02],
    #[doc = "0x08 - SSI Enable Register: This register enables and disables the SPI Master. The following SPI Master registers are NOT writeable when SPI Master is enabled =1: CTRLR0, CTRLR1, BAUDR. You must set SSIENR = 0, before writing these 3 registers. The following SPI Master registers are writeable ONLY when the SPI Master is enabled = 1: DR0."]
    pub ssienr: crate::Reg<ssienr::SSIENR_SPEC>,
    _reserved3: [u8; 0x07],
    #[doc = "0x10 - Slave Enable Register: This register enables the individual slave select output lines from the SPI Master. You cannot write to this register when SPI Master is busy."]
    pub ser: crate::Reg<ser::SER_SPEC>,
    _reserved4: [u8; 0x03],
    #[doc = "0x14 - Baud Rate Select Register: This register derives the frequency of the serial clock that regulates the data transfer. It is impossible to write to this register when the SPI Master is enabled. The SPI Master is enabled and disabled by writing the SSIENR register (0x008)."]
    pub baudr: crate::Reg<baudr::BAUDR_SPEC>,
    _reserved5: [u8; 0x02],
    #[doc = "0x18 - Transmit FFIFO Threshold Level Register: This register controls the threshold value for the transmit FIFO memory."]
    pub txftlr: crate::Reg<txftlr::TXFTLR_SPEC>,
    #[doc = "0x1c - Receive FIFO Threshold Level Register: This register controls the threshold value for the receive FIFO memory."]
    pub rxftlr: crate::Reg<rxftlr::RXFTLR_SPEC>,
    #[doc = "0x20 - Transmit FIFO Level Register: This register contains the number of valid data entries in the transmit FIFO memory."]
    pub txflr: crate::Reg<txflr::TXFLR_SPEC>,
    #[doc = "0x24 - Receive FIFO Level Register: This register contains the number of valid data entries in FIFO memory. This register can be read at any time."]
    pub rxflr: crate::Reg<rxflr::RXFLR_SPEC>,
    #[doc = "0x28 - Status Register: This is a read-only register used to indicate the current transfer status, FIFO status, and any transmission/reception errors that may have occurred. This status register may be read at any time. None of the bits in this register request an interrupt."]
    pub sr: crate::Reg<sr::SR_SPEC>,
    _reserved10: [u8; 0x03],
    #[doc = "0x2c - Interrupt Mask Register: This read/write register masks or enables all interrupts generated by the SPI Master."]
    pub imr: crate::Reg<imr::IMR_SPEC>,
    #[doc = "0x30 - Interrupt Status Register: This register reports the status of SPI Master interrupts after they have been masked."]
    pub isr: crate::Reg<isr::ISR_SPEC>,
    #[doc = "0x34 - Raw Interrupt Status Register: This read-only register reports the status of the SPI Master interrupts prior to masking."]
    pub risr: crate::Reg<risr::RISR_SPEC>,
    #[doc = "0x38 - Transmit FIFO Overflow Interrupt Clear Register."]
    pub txoicr: crate::Reg<txoicr::TXOICR_SPEC>,
    _reserved14: [u8; 0x03],
    #[doc = "0x3c - Receive FIFO Overflow Interrupt Clear Register."]
    pub rxoicr: crate::Reg<rxoicr::RXOICR_SPEC>,
    _reserved15: [u8; 0x03],
    #[doc = "0x40 - Receive FIFO Underflow Interrupt Clear Register."]
    pub rxuicr: crate::Reg<rxuicr::RXUICR_SPEC>,
    _reserved16: [u8; 0x03],
    #[doc = "0x44 - Multi-Master Interrupt Clear Register."]
    pub msticr: crate::Reg<msticr::MSTICR_SPEC>,
    _reserved17: [u8; 0x03],
    #[doc = "0x48 - Interrupt Clear Register."]
    pub icr: crate::Reg<icr::ICR_SPEC>,
    _reserved18: [u8; 0x0f],
    #[doc = "0x58 - Identification Code. This register contains the peripherals identification code."]
    pub idr: crate::Reg<idr::IDR_SPEC>,
    #[doc = "0x5c - Contains the hex representation of the component version. Consists of ASCII value for each number in the version, followed by *. For example 32_30_31_2A represents the version 2.01*."]
    pub ssi_comp_version: crate::Reg<ssi_comp_version::SSI_COMP_VERSION_SPEC>,
}
impl RegisterBlock {
    #[doc = "0x00 - The SPI Master data register is a 16-bit read/write buffer for the transmit/receive FIFOs. When the register is read, data in the receive FIFO buffer is accessed. When it is written to, data are moved into the transmit FIFO buffer; a write can occur only when SSI_EN = 1. FIFOs are reset when SSI_EN = 0. Please refer to SSIENR register (0x008) to enable and disable the SPI Master. The DR register in the SPI Master occupies 131(for TX)/8(for RX) 32-bit address locations of the memory map to facilitate AHB burst transfers. Writing to any of these address locations has the same effect as pushing the data from the pwdata bus into the transmit FIFO. Reading from any of these locations has the same effect as popping data from the receive FIFO onto the prdata bus. The FIFO buffers on the SPI Master are not addressable."]
    #[inline(always)]
    pub fn dr0(&self) -> &crate::Reg<dr0::DR0_SPEC> {
        unsafe {
            &*(((self as *const Self) as *const u8).add(0usize)
                as *const crate::Reg<dr0::DR0_SPEC>)
        }
    }
    #[doc = "0x00 - Control Register 0: This register controls the serial data transfer. It is impossible to write to this register when the SPI Master is enabled. The SPI Master is enabled and disabled by writing to the SSIENR register (0x008)."]
    #[inline(always)]
    pub fn ctrlr0(&self) -> &crate::Reg<ctrlr0::CTRLR0_SPEC> {
        unsafe {
            &*(((self as *const Self) as *const u8).add(0usize)
                as *const crate::Reg<ctrlr0::CTRLR0_SPEC>)
        }
    }
}
#[doc = "CTRLR0 register accessor: an alias for `Reg<CTRLR0_SPEC>`"]
pub type CTRLR0 = crate::Reg<ctrlr0::CTRLR0_SPEC>;
#[doc = "Control Register 0: This register controls the serial data transfer. It is impossible to write to this register when the SPI Master is enabled. The SPI Master is enabled and disabled by writing to the SSIENR register (0x008)."]
pub mod ctrlr0;
#[doc = "CTRLR1 register accessor: an alias for `Reg<CTRLR1_SPEC>`"]
pub type CTRLR1 = crate::Reg<ctrlr1::CTRLR1_SPEC>;
#[doc = "Control Register 1: CTRLR1 register controls the end of serial transfers when in receive-only mode. It is impossible to write to this register when the SPI Master is enabled. The SPI Master is enabled and disabled by writing to the SSIENR register (0x008)."]
pub mod ctrlr1;
#[doc = "SSIENR register accessor: an alias for `Reg<SSIENR_SPEC>`"]
pub type SSIENR = crate::Reg<ssienr::SSIENR_SPEC>;
#[doc = "SSI Enable Register: This register enables and disables the SPI Master. The following SPI Master registers are NOT writeable when SPI Master is enabled =1: CTRLR0, CTRLR1, BAUDR. You must set SSIENR = 0, before writing these 3 registers. The following SPI Master registers are writeable ONLY when the SPI Master is enabled = 1: DR0."]
pub mod ssienr;
#[doc = "SER register accessor: an alias for `Reg<SER_SPEC>`"]
pub type SER = crate::Reg<ser::SER_SPEC>;
#[doc = "Slave Enable Register: This register enables the individual slave select output lines from the SPI Master. You cannot write to this register when SPI Master is busy."]
pub mod ser;
#[doc = "BAUDR register accessor: an alias for `Reg<BAUDR_SPEC>`"]
pub type BAUDR = crate::Reg<baudr::BAUDR_SPEC>;
#[doc = "Baud Rate Select Register: This register derives the frequency of the serial clock that regulates the data transfer. It is impossible to write to this register when the SPI Master is enabled. The SPI Master is enabled and disabled by writing the SSIENR register (0x008)."]
pub mod baudr;
#[doc = "TXFTLR register accessor: an alias for `Reg<TXFTLR_SPEC>`"]
pub type TXFTLR = crate::Reg<txftlr::TXFTLR_SPEC>;
#[doc = "Transmit FFIFO Threshold Level Register: This register controls the threshold value for the transmit FIFO memory."]
pub mod txftlr;
#[doc = "RXFTLR register accessor: an alias for `Reg<RXFTLR_SPEC>`"]
pub type RXFTLR = crate::Reg<rxftlr::RXFTLR_SPEC>;
#[doc = "Receive FIFO Threshold Level Register: This register controls the threshold value for the receive FIFO memory."]
pub mod rxftlr;
#[doc = "TXFLR register accessor: an alias for `Reg<TXFLR_SPEC>`"]
pub type TXFLR = crate::Reg<txflr::TXFLR_SPEC>;
#[doc = "Transmit FIFO Level Register: This register contains the number of valid data entries in the transmit FIFO memory."]
pub mod txflr;
#[doc = "RXFLR register accessor: an alias for `Reg<RXFLR_SPEC>`"]
pub type RXFLR = crate::Reg<rxflr::RXFLR_SPEC>;
#[doc = "Receive FIFO Level Register: This register contains the number of valid data entries in FIFO memory. This register can be read at any time."]
pub mod rxflr;
#[doc = "SR register accessor: an alias for `Reg<SR_SPEC>`"]
pub type SR = crate::Reg<sr::SR_SPEC>;
#[doc = "Status Register: This is a read-only register used to indicate the current transfer status, FIFO status, and any transmission/reception errors that may have occurred. This status register may be read at any time. None of the bits in this register request an interrupt."]
pub mod sr;
#[doc = "IMR register accessor: an alias for `Reg<IMR_SPEC>`"]
pub type IMR = crate::Reg<imr::IMR_SPEC>;
#[doc = "Interrupt Mask Register: This read/write register masks or enables all interrupts generated by the SPI Master."]
pub mod imr;
#[doc = "ISR register accessor: an alias for `Reg<ISR_SPEC>`"]
pub type ISR = crate::Reg<isr::ISR_SPEC>;
#[doc = "Interrupt Status Register: This register reports the status of SPI Master interrupts after they have been masked."]
pub mod isr;
#[doc = "RISR register accessor: an alias for `Reg<RISR_SPEC>`"]
pub type RISR = crate::Reg<risr::RISR_SPEC>;
#[doc = "Raw Interrupt Status Register: This read-only register reports the status of the SPI Master interrupts prior to masking."]
pub mod risr;
#[doc = "TXOICR register accessor: an alias for `Reg<TXOICR_SPEC>`"]
pub type TXOICR = crate::Reg<txoicr::TXOICR_SPEC>;
#[doc = "Transmit FIFO Overflow Interrupt Clear Register."]
pub mod txoicr;
#[doc = "RXOICR register accessor: an alias for `Reg<RXOICR_SPEC>`"]
pub type RXOICR = crate::Reg<rxoicr::RXOICR_SPEC>;
#[doc = "Receive FIFO Overflow Interrupt Clear Register."]
pub mod rxoicr;
#[doc = "RXUICR register accessor: an alias for `Reg<RXUICR_SPEC>`"]
pub type RXUICR = crate::Reg<rxuicr::RXUICR_SPEC>;
#[doc = "Receive FIFO Underflow Interrupt Clear Register."]
pub mod rxuicr;
#[doc = "MSTICR register accessor: an alias for `Reg<MSTICR_SPEC>`"]
pub type MSTICR = crate::Reg<msticr::MSTICR_SPEC>;
#[doc = "Multi-Master Interrupt Clear Register."]
pub mod msticr;
#[doc = "ICR register accessor: an alias for `Reg<ICR_SPEC>`"]
pub type ICR = crate::Reg<icr::ICR_SPEC>;
#[doc = "Interrupt Clear Register."]
pub mod icr;
#[doc = "IDR register accessor: an alias for `Reg<IDR_SPEC>`"]
pub type IDR = crate::Reg<idr::IDR_SPEC>;
#[doc = "Identification Code. This register contains the peripherals identification code."]
pub mod idr;
#[doc = "SSI_COMP_VERSION register accessor: an alias for `Reg<SSI_COMP_VERSION_SPEC>`"]
pub type SSI_COMP_VERSION = crate::Reg<ssi_comp_version::SSI_COMP_VERSION_SPEC>;
#[doc = "Contains the hex representation of the component version. Consists of ASCII value for each number in the version, followed by *. For example 32_30_31_2A represents the version 2.01*."]
pub mod ssi_comp_version;
#[doc = "DR0 register accessor: an alias for `Reg<DR0_SPEC>`"]
pub type DR0 = crate::Reg<dr0::DR0_SPEC>;
#[doc = "The SPI Master data register is a 16-bit read/write buffer for the transmit/receive FIFOs. When the register is read, data in the receive FIFO buffer is accessed. When it is written to, data are moved into the transmit FIFO buffer; a write can occur only when SSI_EN = 1. FIFOs are reset when SSI_EN = 0. Please refer to SSIENR register (0x008) to enable and disable the SPI Master. The DR register in the SPI Master occupies 131(for TX)/8(for RX) 32-bit address locations of the memory map to facilitate AHB burst transfers. Writing to any of these address locations has the same effect as pushing the data from the pwdata bus into the transmit FIFO. Reading from any of these locations has the same effect as popping data from the receive FIFO onto the prdata bus. The FIFO buffers on the SPI Master are not addressable."]
pub mod dr0;
